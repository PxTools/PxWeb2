@use '$ui/style-dictionary/dist/scss/fixed-variables.scss' as fixed;

.navigationDrawer {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: fixed.$spacing-3;
  flex-shrink: 0;
  align-self: stretch;
  background: var(--px-color-background-subtle);
  overflow-y: auto;

  @media (min-width: fixed.$breakpoints-xsmall-min-width) and (max-width: fixed.$breakpoints-xsmall-max-width) {
    width: calc(100vw - 40px);
    max-width: 396px;
    padding: fixed.$spacing-4;
  }

  @media ((min-width: fixed.$breakpoints-small-min-width) and (max-width: fixed.$breakpoints-medium-max-width)) {
    width: 428px;
    padding-left: fixed.$spacing-8;
    padding-right: fixed.$spacing-8;
    padding-top: fixed.$spacing-6;
    padding-bottom: fixed.$spacing-6;
  }

  // xsmall, small and medium
  @media (min-width: fixed.$breakpoints-xsmall-min-width) and (max-width: fixed.$breakpoints-small-max-width) {
    height: 100vh;
    // Handle rtl languages
    border-start-start-radius: var(--px-border-radius-none);
    border-start-end-radius: var(--px-border-radius-xlarge);
    border-end-end-radius: var(--px-border-radius-xlarge);
    border-end-start-radius: var(--px-border-radius-none);

    // Not from Figma
    position: absolute;
    top: 0;
    z-index: 999;
  }

  @media (min-width: fixed.$breakpoints-medium-min-width) and (max-width: fixed.$breakpoints-medium-max-width) {
    height: calc(100vh - 80px);
    // Handle rtl languages
    border-start-start-radius: var(--px-border-radius-none);
    border-start-end-radius: var(--px-border-radius-xlarge);
    border-end-end-radius: var(--px-border-radius-xlarge);
    border-end-start-radius: var(--px-border-radius-none);

    // Not from Figma
    position: absolute;
    top: 0;
    z-index: 999;
  }

  // large
  @media (min-width: fixed.$breakpoints-large-min-width) and (max-width: fixed.$breakpoints-large-max-width) {
    width: 428px;
    padding: fixed.$spacing-8;

    // Calculate height of main container, minus the header height
    height: calc(100vh - fixed.$spacing-22);

    // Handle rtl languages
    border-start-start-radius: var(--px-border-radius-xlarge);
    border-start-end-radius: var(--px-border-radius-xlarge);
    border-end-end-radius: var(--px-border-radius-xlarge);
    border-end-start-radius: var(--px-border-radius-none);

    // Not from Figma
    position: absolute;
    inset-inline-start: 120px; // Instead of "left" to handle rtl languages
    z-index: 1;

    // Position NavigationDrawer below the header
    top: fixed.$spacing-22;

    &.skipToMainContentVisible {
      // Calculate position of NavigationDrawer below the header and SkipToMainContent
      top: calc(fixed.$spacing-22 + var(--skip-to-main-content-height));
    }
  }

  // xlarge and xxlarge
  @media ((min-width: fixed.$breakpoints-xlarge-min-width) and (max-width: fixed.$breakpoints-xlarge-max-width)) or ((min-width: fixed.$breakpoints-xxlarge-min-width)) {
    width: 396px;
    padding: 0px fixed.$spacing-8 fixed.$spacing-8 0px;
    border-radius: var(--px-border-radius-none);
  }
}

.heading {
  display: flex;
  height: fixed.$spacing-11;
  padding: 0px fixed.$spacing-6;
  justify-content: space-between;
  align-items: center;
  flex-shrink: 0;
  align-self: stretch;
  border-radius: var(--px-border-radius-large);
}

.hideMenu {
  display: flex;
  flex-direction: row;
  padding-right: 4px;
  align-items: center;
  align-self: stretch;

  // Remove default button styles
  background: none;
  border: none;
  margin: 0;
  color: inherit;
  font: inherit;
  cursor: pointer; // keep pointer for accessibility
  outline: none;

  // Remove default button appearance in all browsers
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;

  &:focus-visible {
    box-shadow: inset 0 0 0 3px var(--px-color-border-focus-boxshadow);
    outline: 3px solid var(--px-color-border-focus-outline);
    outline-offset: 3px;
    border-radius: var(--px-border-radius-small);
  }
}
.hideMenu:hover {
  .hideIconWrapper {
    inset-inline-start: -2px;
  }
}

.clickable {
  &:hover {
    cursor: pointer;
  }
}

.hideIconWrapper {
  display: flex;
  align-items: flex-start;
  gap: fixed.$spacing-1;
  position: relative;
  inset-inline-start: 0;
  transition: inset-inline-start ease 0.1s;
}

// Not from Figma
.backdrop {
  @media (min-width: fixed.$breakpoints-xsmall-min-width) and (max-width: fixed.$breakpoints-small-max-width) {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--px-color-surface-scrim);
    z-index: 999;
  }
}

.fadein {
  animation: fadeIn 200ms forwards;
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

// Animation that slides in NavigationDrawer from the left when opened.
// Needs position to be absolute so it only works on screen size xsmall, small and medium at the moment.
// Add class "slidein" to NavigationDrawer component in NavigationDrawer.tsx to use this animation.
// .slidein {
//   animation: slideIn 300ms forwards;
// }

// @keyframes slideIn {
//   0% {
//     left: -400px;
//   }
//   100% {
//     left: 0;
//   }
// }
